/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type AuthorsSection = {
  _type: 'authorsSection'
  sectionTitle?: string
  displayType?: 'selected'
  authors?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'author'
  }>
  limit?: number
  showAllAuthorsLink?: boolean
  allAuthorsLinkText?: string
  allAuthorsLinkUrl?: string
}

export type PodcastSection = {
  _type: 'podcastSection'
  sectionTitle?: string
  episodes: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'podcast'
  }>
  showAllEpisodesLink?: boolean
  allEpisodesLinkText?: string
  allEpisodesLinkUrl?: string
  podcastBranding?: {
    name?: string
    subtitle?: string
  }
  animations?: {
    enabled?: boolean
  }
}

export type ArticlesSection = {
  _type: 'articlesSection'
  sectionTitle?: string
  articles: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'magazine'
  }>
  showAllArticlesLink?: boolean
  allArticlesLinkText?: string
  allArticlesLinkUrl?: string
  sidebar?: {
    printMagazine?: {
      enabled?: boolean
      label?: string
      issue: string
      coverImage: {
        asset?: {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        media?: unknown
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        alt: string
        _type: 'image'
      }
      buttonText?: string
      buttonLink?: string
    }
    mostPopular?: {
      enabled?: boolean
      title?: string
      articles?: Array<{
        _ref: string
        _type: 'reference'
        _weak?: boolean
        _key: string
        [internalGroqTypeReferenceTo]?: 'magazine'
      }>
    }
    newsletter?: {
      enabled?: boolean
      label?: string
      heading?: string
      placeholder?: string
      buttonText?: string
      backgroundColor?: string
    }
  }
  animations?: {
    enabled?: boolean
    animationDuration?: number
  }
  layout?: {
    mainColumnWidth?: '3/4' | '2/3' | '3/5'
    showSidebar?: boolean
  }
}

export type SocialLink = {
  _type: 'socialLink'
  platform: string
  url: string
  icon: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    _type: 'image'
  }
}

export type NavLink = {
  _type: 'navLink'
  text: string
  url: string
}

export type Marquee = {
  _type: 'marquee'
  enabled?: boolean
  text: string
  speed?: number
  backgroundColor?: Color
  textColor?: Color
}

export type Newsletter = {
  _type: 'newsletter'
  active?: boolean
  title?: string
  description?: string
  inputPlaceholder?: string
  buttonText?: string
}

export type Button = {
  _type: 'button'
  text?: string
  link?: Link
  type?: 'primary' | 'bordered' | 'secondary' | 'ghost' | 'elevated'
}

export type CallToAction = {
  _type: 'callToAction'
  heading: string
  text?: string
  buttonText?: string
  link?: Link
}

export type Link = {
  _type: 'link'
  linkType?: 'href' | 'page' | 'post'
  href?: string
  page?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'page'
  }
  post?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'post'
  }
  openInNewTab?: boolean
}

export type HeroSection = {
  _type: 'heroSection'
  heroText?: {
    enabled?: boolean
    strokeColor?: Color
    fillColor?: Color
  }
  newsTicker?: {
    enabled?: boolean
    label: string
    backgroundColor?: string
    textColor?: string
    items: Array<{
      text: string
      _key: string
    }>
    speed?: number
  }
  heroHeading: string
  description: string
  metadata?: {
    author?: {
      label?: string
      name: string
    }
    date?: {
      label?: string
      value: string
    }
    duration?: {
      label?: string
      value: string
    }
  }
  label?: {
    text: string
    borderColor?: string
    textColor?: string
  }
  heroImage: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt: string
    _type: 'image'
  }
  animations?: {
    enabled?: boolean
    parallaxStrength?: number
  }
  styling?: {
    headingColor?: string
    descriptionColor?: string
    backgroundColor?: string
  }
}

export type InfoSection = {
  _type: 'infoSection'
  heading?: string
  subheading?: string
  content?: Array<
    | {
        children?: Array<{
          marks?: Array<string>
          text?: string
          _type: 'span'
          _key: string
        }>
        style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote'
        listItem?: 'bullet' | 'number'
        markDefs?: Array<{
          linkType?: 'href' | 'page' | 'post'
          href?: string
          page?: {
            _ref: string
            _type: 'reference'
            _weak?: boolean
            [internalGroqTypeReferenceTo]?: 'page'
          }
          post?: {
            _ref: string
            _type: 'reference'
            _weak?: boolean
            [internalGroqTypeReferenceTo]?: 'post'
          }
          openInNewTab?: boolean
          _type: 'link'
          _key: string
        }>
        level?: number
        _type: 'block'
        _key: string
      }
    | {
        text: string
        attribution?: string
        _type: 'quote'
        _key: string
      }
    | {
        asset?: {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        media?: unknown
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        alt: string
        caption?: string
        _type: 'contentImage'
        _key: string
      }
  >
}

export type BlockContent = Array<
  | {
      children?: Array<{
        marks?: Array<string>
        text?: string
        _type: 'span'
        _key: string
      }>
      style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote'
      listItem?: 'bullet' | 'number'
      markDefs?: Array<{
        linkType?: 'href' | 'page' | 'post'
        href?: string
        page?: {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'page'
        }
        post?: {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'post'
        }
        openInNewTab?: boolean
        _type: 'link'
        _key: string
      }>
      level?: number
      _type: 'block'
      _key: string
    }
  | {
      text: string
      attribution?: string
      _type: 'quote'
      _key: string
    }
  | {
      asset?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
      }
      media?: unknown
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      alt: string
      caption?: string
      _type: 'contentImage'
      _key: string
    }
>

export type Podcast = {
  _id: string
  _type: 'podcast'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title: string
  slug: Slug
  episodeNumber: string
  thumbnail: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt: string
    _type: 'image'
  }
  publishedAt: string
  duration: string
  excerpt: string
  content: BlockContent
  podcastLinks?: {
    spotify?: string
    apple?: string
    soundcloud?: string
  }
  podcastBranding?: {
    name?: string
    subtitle?: string
  }
  socialShare?: {
    instagram?: string
    twitter?: string
    youtube?: string
  }
  featured?: boolean
  seo?: {
    metaTitle?: string
    metaDescription?: string
    ogImage?: {
      asset?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
      }
      media?: unknown
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      _type: 'image'
    }
  }
}

export type Magazine = {
  _id: string
  _type: 'magazine'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title: string
  slug: Slug
  excerpt: string
  category: 'art' | 'street-art' | 'sculptures'
  thumbnail: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt: string
    _type: 'image'
  }
  heroImage: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt: string
    _type: 'image'
  }
  publishedAt: string
  author: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'author'
  }
  duration: number
  label?: string
  heroDescription: string
  content: BlockContent
  socialShare?: {
    instagram?: string
    twitter?: string
    youtube?: string
  }
  featured?: boolean
  seo?: {
    metaTitle?: string
    metaDescription?: string
    ogImage?: {
      asset?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
      }
      media?: unknown
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      _type: 'image'
    }
  }
}

export type Post = {
  _id: string
  _type: 'post'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title: string
  slug: Slug
  content?: BlockContent
  excerpt?: string
  coverImage: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    _type: 'image'
  }
  date?: string
  author?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'person'
  }
}

export type Person = {
  _id: string
  _type: 'person'
  _createdAt: string
  _updatedAt: string
  _rev: string
  firstName: string
  lastName: string
  picture: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    _type: 'image'
  }
}

export type Page = {
  _id: string
  _type: 'page'
  _createdAt: string
  _updatedAt: string
  _rev: string
  name: string
  slug: Slug
  heading: string
  subheading?: string
  pageBuilder?: Array<
    | ({
        _key: string
      } & HeroSection)
    | ({
        _key: string
      } & ArticlesSection)
    | ({
        _key: string
      } & PodcastSection)
    | ({
        _key: string
      } & AuthorsSection)
  >
}

export type Author = {
  _id: string
  _type: 'author'
  _createdAt: string
  _updatedAt: string
  _rev: string
  name: string
  slug: Slug
  image: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt: string
    _type: 'image'
  }
  job: string
  city: string
  bio: string
  fullBio: string
  intro?: string
  socialLinks?: {
    instagram?: string
    twitter?: string
    youtube?: string
  }
  featured?: boolean
  seo?: {
    metaTitle?: string
    metaDescription?: string
  }
}

export type Settings = {
  _id: string
  _type: 'settings'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title: string
  description?: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: 'span'
      _key: string
    }>
    style?: 'normal'
    listItem?: never
    markDefs?: Array<{
      linkType?: 'href' | 'page' | 'string'
      href?: string
      page?: string
      openInNewTab?: boolean
      _type: 'link'
      _key: string
    }>
    level?: number
    _type: 'block'
    _key: string
  }>
  ogImage?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    metadataBase?: string
    _type: 'image'
  }
  footer?: Footer
  navbar?: Navbar
}

export type Navbar = {
  _type: 'navbar'
  logo?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    _type: 'image'
  }
  navLinks?: Array<
    {
      _key: string
    } & NavLink
  >
  socialLinks?: Array<
    {
      _key: string
    } & SocialLink
  >
  button?: Button
}

export type Footer = {
  _type: 'footer'
  newsletter?: Newsletter
  marquee?: Marquee
  logo: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    _type: 'image'
  }
  tagline?: string
  navLinks?: Array<
    {
      _key: string
    } & NavLink
  >
  copyright?: string
  socialLinks?: Array<
    {
      _key: string
    } & SocialLink
  >
}

export type Color = {
  _type: 'color'
  hex?: string
  alpha?: number
  hsl?: HslaColor
  hsv?: HsvaColor
  rgb?: RgbaColor
}

export type RgbaColor = {
  _type: 'rgbaColor'
  r?: number
  g?: number
  b?: number
  a?: number
}

export type HsvaColor = {
  _type: 'hsvaColor'
  h?: number
  s?: number
  v?: number
  a?: number
}

export type HslaColor = {
  _type: 'hslaColor'
  h?: number
  s?: number
  l?: number
  a?: number
}

export type SanityAssistInstructionTask = {
  _type: 'sanity.assist.instructionTask'
  path?: string
  instructionKey?: string
  started?: string
  updated?: string
  info?: string
}

export type SanityAssistTaskStatus = {
  _type: 'sanity.assist.task.status'
  tasks?: Array<
    {
      _key: string
    } & SanityAssistInstructionTask
  >
}

export type SanityAssistSchemaTypeAnnotations = {
  _type: 'sanity.assist.schemaType.annotations'
  title?: string
  fields?: Array<
    {
      _key: string
    } & SanityAssistSchemaTypeField
  >
}

export type SanityAssistOutputType = {
  _type: 'sanity.assist.output.type'
  type?: string
}

export type SanityAssistOutputField = {
  _type: 'sanity.assist.output.field'
  path?: string
}

export type SanityAssistInstructionContext = {
  _type: 'sanity.assist.instruction.context'
  reference: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'assist.instruction.context'
  }
}

export type AssistInstructionContext = {
  _id: string
  _type: 'assist.instruction.context'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  context?: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: 'span'
      _key: string
    }>
    style?: 'normal'
    listItem?: never
    markDefs?: null
    level?: number
    _type: 'block'
    _key: string
  }>
}

export type SanityAssistInstructionUserInput = {
  _type: 'sanity.assist.instruction.userInput'
  message: string
  description?: string
}

export type SanityAssistInstructionPrompt = Array<{
  children?: Array<
    | {
        marks?: Array<string>
        text?: string
        _type: 'span'
        _key: string
      }
    | ({
        _key: string
      } & SanityAssistInstructionFieldRef)
    | ({
        _key: string
      } & SanityAssistInstructionContext)
    | ({
        _key: string
      } & SanityAssistInstructionUserInput)
  >
  style?: 'normal'
  listItem?: never
  markDefs?: null
  level?: number
  _type: 'block'
  _key: string
}>

export type SanityAssistInstructionFieldRef = {
  _type: 'sanity.assist.instruction.fieldRef'
  path?: string
}

export type SanityAssistInstruction = {
  _type: 'sanity.assist.instruction'
  prompt?: SanityAssistInstructionPrompt
  icon?: string
  title?: string
  userId?: string
  createdById?: string
  output?: Array<
    | ({
        _key: string
      } & SanityAssistOutputField)
    | ({
        _key: string
      } & SanityAssistOutputType)
  >
}

export type SanityAssistSchemaTypeField = {
  _type: 'sanity.assist.schemaType.field'
  path?: string
  instructions?: Array<
    {
      _key: string
    } & SanityAssistInstruction
  >
}

export type SanityImagePaletteSwatch = {
  _type: 'sanity.imagePaletteSwatch'
  background?: string
  foreground?: string
  population?: number
  title?: string
}

export type SanityImagePalette = {
  _type: 'sanity.imagePalette'
  darkMuted?: SanityImagePaletteSwatch
  lightVibrant?: SanityImagePaletteSwatch
  darkVibrant?: SanityImagePaletteSwatch
  vibrant?: SanityImagePaletteSwatch
  dominant?: SanityImagePaletteSwatch
  lightMuted?: SanityImagePaletteSwatch
  muted?: SanityImagePaletteSwatch
}

export type SanityImageDimensions = {
  _type: 'sanity.imageDimensions'
  height: number
  width: number
  aspectRatio: number
}

export type SanityImageHotspot = {
  _type: 'sanity.imageHotspot'
  x: number
  y: number
  height: number
  width: number
}

export type SanityImageCrop = {
  _type: 'sanity.imageCrop'
  top: number
  bottom: number
  left: number
  right: number
}

export type SanityFileAsset = {
  _id: string
  _type: 'sanity.fileAsset'
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  source?: SanityAssetSourceData
}

export type SanityImageAsset = {
  _id: string
  _type: 'sanity.imageAsset'
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  metadata?: SanityImageMetadata
  source?: SanityAssetSourceData
}

export type SanityImageMetadata = {
  _type: 'sanity.imageMetadata'
  location?: Geopoint
  dimensions?: SanityImageDimensions
  palette?: SanityImagePalette
  lqip?: string
  blurHash?: string
  hasAlpha?: boolean
  isOpaque?: boolean
}

export type Geopoint = {
  _type: 'geopoint'
  lat?: number
  lng?: number
  alt?: number
}

export type Slug = {
  _type: 'slug'
  current: string
  source?: string
}

export type SanityAssetSourceData = {
  _type: 'sanity.assetSourceData'
  name?: string
  id?: string
  url?: string
}

export type AllSanitySchemaTypes =
  | AuthorsSection
  | PodcastSection
  | ArticlesSection
  | SocialLink
  | NavLink
  | Marquee
  | Newsletter
  | Button
  | CallToAction
  | Link
  | HeroSection
  | InfoSection
  | BlockContent
  | Podcast
  | Magazine
  | Post
  | Person
  | Page
  | Author
  | Settings
  | Navbar
  | Footer
  | Color
  | RgbaColor
  | HsvaColor
  | HslaColor
  | SanityAssistInstructionTask
  | SanityAssistTaskStatus
  | SanityAssistSchemaTypeAnnotations
  | SanityAssistOutputType
  | SanityAssistOutputField
  | SanityAssistInstructionContext
  | AssistInstructionContext
  | SanityAssistInstructionUserInput
  | SanityAssistInstructionPrompt
  | SanityAssistInstructionFieldRef
  | SanityAssistInstruction
  | SanityAssistSchemaTypeField
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityImageHotspot
  | SanityImageCrop
  | SanityFileAsset
  | SanityImageAsset
  | SanityImageMetadata
  | Geopoint
  | Slug
  | SanityAssetSourceData
export declare const internalGroqTypeReferenceTo: unique symbol
// Source: ./sanity/lib/queries.ts
// Variable: authorSlugsQuery
// Query: *[_type == 'author'] {    "slug": slug.current  }
export type AuthorSlugsQueryResult = Array<{
  slug: string
}>
// Variable: authorsQuery
// Query: *[_type == 'author'] | order(name asc) {    _id,    _type,    name,    "slug": slug.current,    image {      asset->{        _id,        url,        metadata {          lqip,          dimensions {            width,            height,            aspectRatio          }        }      },      alt,      hotspot,      crop    },    job,    city,    bio,    featured  }
export type AuthorsQueryResult = Array<{
  _id: string
  _type: 'author'
  name: string
  slug: string
  image: {
    asset: {
      _id: string
      url: string | null
      metadata: {
        lqip: string | null
        dimensions: {
          width: number
          height: number
          aspectRatio: number
        } | null
      } | null
    } | null
    alt: string
    hotspot: SanityImageHotspot | null
    crop: SanityImageCrop | null
  }
  job: string
  city: string
  bio: string
  featured: boolean | null
}>
// Variable: authorWithArticlesQuery
// Query: *[_type == 'author' && slug.current == $slug][0] {    _id,    _type,    name,    "slug": slug.current,    image {      asset->{        _id,        url,        metadata {          lqip,          dimensions {            width,            height,            aspectRatio          }        }      },      alt,      hotspot,      crop    },    job,    city,    bio,    fullBio,    intro,    socialLinks {      instagram,      twitter,      youtube    },    featured,    "articles": *[_type == 'magazine' && author._ref == ^._id] | order(publishedAt desc) {      _id,      _type,      title,      "slug": slug.current,      thumbnail {        asset->{          _id,          url,          metadata {            lqip,            dimensions {              width,              height,              aspectRatio            }          }        },        alt,        hotspot,        crop      },      publishedAt,      duration    },    "articleCount": count(*[_type == 'magazine' && author._ref == ^._id]),    seo {      metaTitle,      metaDescription    }  }
export type AuthorWithArticlesQueryResult = {
  _id: string
  _type: 'author'
  name: string
  slug: string
  image: {
    asset: {
      _id: string
      url: string | null
      metadata: {
        lqip: string | null
        dimensions: {
          width: number
          height: number
          aspectRatio: number
        } | null
      } | null
    } | null
    alt: string
    hotspot: SanityImageHotspot | null
    crop: SanityImageCrop | null
  }
  job: string
  city: string
  bio: string
  fullBio: string
  intro: string | null
  socialLinks: {
    instagram: string | null
    twitter: string | null
    youtube: string | null
  } | null
  featured: boolean | null
  articles: Array<{
    _id: string
    _type: 'magazine'
    title: string
    slug: string
    thumbnail: {
      asset: {
        _id: string
        url: string | null
        metadata: {
          lqip: string | null
          dimensions: {
            width: number
            height: number
            aspectRatio: number
          } | null
        } | null
      } | null
      alt: string
      hotspot: SanityImageHotspot | null
      crop: SanityImageCrop | null
    }
    publishedAt: string
    duration: number
  }>
  articleCount: number
  seo: {
    metaTitle: string | null
    metaDescription: string | null
  } | null
} | null
// Variable: authorDetailQuery
// Query: *[_type == 'author' && slug.current == $slug][0] {    _id,    _type,    name,    "slug": slug.current,    image {      asset->{        _id,        url,        metadata {          lqip,          dimensions {            width,            height,            aspectRatio          }        }      },      alt,      hotspot,      crop    },    job,    city,    bio,    fullBio,    intro,    socialLinks {      instagram,      twitter,      youtube    },    featured,    seo {      metaTitle,      metaDescription    }  }
export type AuthorDetailQueryResult = {
  _id: string
  _type: 'author'
  name: string
  slug: string
  image: {
    asset: {
      _id: string
      url: string | null
      metadata: {
        lqip: string | null
        dimensions: {
          width: number
          height: number
          aspectRatio: number
        } | null
      } | null
    } | null
    alt: string
    hotspot: SanityImageHotspot | null
    crop: SanityImageCrop | null
  }
  job: string
  city: string
  bio: string
  fullBio: string
  intro: string | null
  socialLinks: {
    instagram: string | null
    twitter: string | null
    youtube: string | null
  } | null
  featured: boolean | null
  seo: {
    metaTitle: string | null
    metaDescription: string | null
  } | null
} | null
// Variable: settingsQuery
// Query: *[_type == "settings"][0]{  _id,  title,  description,  ogImage,  footer {    newsletter {      active,      title,      description,      inputPlaceholder,      buttonText,    },    marquee,    logo {      asset->{        url      },      alt    },    tagline,    description,    navLinks[] {      text,      url    },    copyright,    socialLinks[] {      platform,      url,      icon {        asset->{          url        },        alt      }    },  },  navbar {    logo {      asset->{        url      },      alt    },    navLinks[] {      text,      url    },    socialLinks[] {      platform,      url,      icon {        asset->{          url        },        alt      }    },    button {      text,      link {        _type,        _key,        linkType,        page,        url,        href,        openInNewTab      },      type    }  }}
export type SettingsQueryResult = {
  _id: string
  title: string
  description: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: 'span'
      _key: string
    }>
    style?: 'normal'
    listItem?: never
    markDefs?: Array<{
      linkType?: 'href' | 'page' | 'string'
      href?: string
      page?: string
      openInNewTab?: boolean
      _type: 'link'
      _key: string
    }>
    level?: number
    _type: 'block'
    _key: string
  }> | null
  ogImage: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    metadataBase?: string
    _type: 'image'
  } | null
  footer: {
    newsletter: {
      active: boolean | null
      title: string | null
      description: string | null
      inputPlaceholder: string | null
      buttonText: string | null
    } | null
    marquee: Marquee | null
    logo: {
      asset: {
        url: string | null
      } | null
      alt: string | null
    }
    tagline: string | null
    description: null
    navLinks: Array<{
      text: string
      url: string
    }> | null
    copyright: string | null
    socialLinks: Array<{
      platform: string
      url: string
      icon: {
        asset: {
          url: string | null
        } | null
        alt: string | null
      }
    }> | null
  } | null
  navbar: {
    logo: {
      asset: {
        url: string | null
      } | null
      alt: string | null
    } | null
    navLinks: Array<{
      text: string
      url: string
    }> | null
    socialLinks: Array<{
      platform: string
      url: string
      icon: {
        asset: {
          url: string | null
        } | null
        alt: string | null
      }
    }> | null
    button: {
      text: string | null
      link: {
        _type: 'link'
        _key: null
        linkType: 'href' | 'page' | 'post' | null
        page: {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'page'
        } | null
        url: null
        href: string | null
        openInNewTab: boolean | null
      } | null
      type: 'bordered' | 'elevated' | 'ghost' | 'primary' | 'secondary' | null
    } | null
  } | null
} | null
// Variable: getPageQuery
// Query: *[_type == 'page' && slug.current == $slug][0]{    _id,    _type,    name,    slug,    heading,    subheading,    "pageBuilder": pageBuilder[]{      ...,        _type == "heroSection" => {        _key,        _type,        heroText {          enabled,          strokeColor {            hex          },          fillColor {            hex          }        },        newsTicker {          enabled,          label,          backgroundColor,          textColor,          items[] {            text          },          speed        },        heroHeading,        description,        metadata {          author {            label,            name          },          date {            label,            value          },          duration {            label,            value          }        },        label {          text,          borderColor,          textColor        },        heroImage {          asset->{            _id,            url,            metadata {              lqip,              dimensions {                width,                height,                aspectRatio              }            }          },          alt,          hotspot,          crop        },        animations {          enabled,          parallaxStrength        },        styling {          headingColor,          descriptionColor,          backgroundColor        }      },      _type == "articlesSection" => {        _key,        _type,        sectionTitle,        articles[]->{          ...,          _id,          _type,          title,          "slug": slug.current,          excerpt,          category,          thumbnail {            asset->{              _id,              url,              metadata {                lqip,                dimensions {                  width,                  height,                  aspectRatio                }              }            },            alt,            hotspot,            crop          },          publishedAt,          "author": author->{            name          },          duration        },        showAllArticlesLink,        allArticlesLinkText,        allArticlesLinkUrl,        sidebar {          printMagazine {            enabled,            label,            issue,            coverImage {              asset->{                _id,                url,                metadata {                  lqip,                  dimensions {                    width,                    height,                    aspectRatio                  }                }              },              alt,              hotspot,              crop            },            buttonText,            buttonLink          },          mostPopular {            enabled,            title,            articles[]->{              _id,              _type,              title,              "slug": slug.current,              "author": author->{                name              }            }          },          newsletter {            enabled,            label,            heading,            placeholder,            buttonText,            backgroundColor          }        },        animations {          enabled,          animationDuration        },        layout {          mainColumnWidth,          showSidebar        }      },        _type == "podcastSection" => {    _key,    _type,    sectionTitle,    episodes[]->{      _id,      _type,      title,      "slug": slug.current,      episodeNumber,      thumbnail {        asset->{          _id,          url,          metadata {            lqip,            dimensions {              width,              height,              aspectRatio            }          }        },        alt,        hotspot,        crop      },      publishedAt,      duration    },    showAllEpisodesLink,    allEpisodesLinkText,    allEpisodesLinkUrl,    podcastBranding {      name,      subtitle    },    animations {      enabled    }  },        _type == "authorsSection" => {    _key,    _type,    sectionTitle,    authors[]->{      _id,      _type,      name,      "slug": slug.current,      image {        asset->{          _id,          url,          metadata {            lqip,            dimensions {              width,              height,              aspectRatio            }          }        },        alt,        hotspot,        crop      },      job,      city,      bio,      socialLinks {        instagram,        twitter,        youtube      },      featured,      "articleCount": count(*[_type == 'magazine' && author._ref == ^._id])    },    limit,    showAllAuthorsLink,    allAuthorsLinkText,    allAuthorsLinkUrl  },    },  }
export type GetPageQueryResult = {
  _id: string
  _type: 'page'
  name: string
  slug: Slug
  heading: string
  subheading: string | null
  pageBuilder: Array<
    | {
        _key: string
        _type: 'articlesSection'
        sectionTitle: string | null
        articles: Array<{
          _id: string
          _type: 'magazine'
          _createdAt: string
          _updatedAt: string
          _rev: string
          title: string
          slug: string
          excerpt: string
          category: 'art' | 'sculptures' | 'street-art'
          thumbnail: {
            asset: {
              _id: string
              url: string | null
              metadata: {
                lqip: string | null
                dimensions: {
                  width: number
                  height: number
                  aspectRatio: number
                } | null
              } | null
            } | null
            alt: string
            hotspot: SanityImageHotspot | null
            crop: SanityImageCrop | null
          }
          heroImage: {
            asset?: {
              _ref: string
              _type: 'reference'
              _weak?: boolean
              [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
            }
            media?: unknown
            hotspot?: SanityImageHotspot
            crop?: SanityImageCrop
            alt: string
            _type: 'image'
          }
          publishedAt: string
          author: {
            name: string
          }
          duration: number
          label?: string
          heroDescription: string
          content: BlockContent
          socialShare?: {
            instagram?: string
            twitter?: string
            youtube?: string
          }
          featured?: boolean
          seo?: {
            metaTitle?: string
            metaDescription?: string
            ogImage?: {
              asset?: {
                _ref: string
                _type: 'reference'
                _weak?: boolean
                [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
              }
              media?: unknown
              hotspot?: SanityImageHotspot
              crop?: SanityImageCrop
              _type: 'image'
            }
          }
        }>
        showAllArticlesLink: boolean | null
        allArticlesLinkText: string | null
        allArticlesLinkUrl: string | null
        sidebar: {
          printMagazine: {
            enabled: boolean | null
            label: string | null
            issue: string
            coverImage: {
              asset: {
                _id: string
                url: string | null
                metadata: {
                  lqip: string | null
                  dimensions: {
                    width: number
                    height: number
                    aspectRatio: number
                  } | null
                } | null
              } | null
              alt: string
              hotspot: SanityImageHotspot | null
              crop: SanityImageCrop | null
            }
            buttonText: string | null
            buttonLink: string | null
          } | null
          mostPopular: {
            enabled: boolean | null
            title: string | null
            articles: Array<{
              _id: string
              _type: 'magazine'
              title: string
              slug: string
              author: {
                name: string
              }
            }> | null
          } | null
          newsletter: {
            enabled: boolean | null
            label: string | null
            heading: string | null
            placeholder: string | null
            buttonText: string | null
            backgroundColor: string | null
          } | null
        } | null
        animations: {
          enabled: boolean | null
          animationDuration: number | null
        } | null
        layout: {
          mainColumnWidth: '2/3' | '3/4' | '3/5' | null
          showSidebar: boolean | null
        } | null
      }
    | {
        _key: string
        _type: 'authorsSection'
        sectionTitle: string | null
        displayType?: 'selected'
        authors: Array<{
          _id: string
          _type: 'author'
          name: string
          slug: string
          image: {
            asset: {
              _id: string
              url: string | null
              metadata: {
                lqip: string | null
                dimensions: {
                  width: number
                  height: number
                  aspectRatio: number
                } | null
              } | null
            } | null
            alt: string
            hotspot: SanityImageHotspot | null
            crop: SanityImageCrop | null
          }
          job: string
          city: string
          bio: string
          socialLinks: {
            instagram: string | null
            twitter: string | null
            youtube: string | null
          } | null
          featured: boolean | null
          articleCount: number
        }> | null
        limit: number | null
        showAllAuthorsLink: boolean | null
        allAuthorsLinkText: string | null
        allAuthorsLinkUrl: string | null
      }
    | {
        _key: string
        _type: 'heroSection'
        heroText: {
          enabled: boolean | null
          strokeColor: {
            hex: string | null
          } | null
          fillColor: {
            hex: string | null
          } | null
        } | null
        newsTicker: {
          enabled: boolean | null
          label: string
          backgroundColor: string | null
          textColor: string | null
          items: Array<{
            text: string
          }>
          speed: number | null
        } | null
        heroHeading: string
        description: string
        metadata: {
          author: {
            label: string | null
            name: string
          } | null
          date: {
            label: string | null
            value: string
          } | null
          duration: {
            label: string | null
            value: string
          } | null
        } | null
        label: {
          text: string
          borderColor: string | null
          textColor: string | null
        } | null
        heroImage: {
          asset: {
            _id: string
            url: string | null
            metadata: {
              lqip: string | null
              dimensions: {
                width: number
                height: number
                aspectRatio: number
              } | null
            } | null
          } | null
          alt: string
          hotspot: SanityImageHotspot | null
          crop: SanityImageCrop | null
        }
        animations: {
          enabled: boolean | null
          parallaxStrength: number | null
        } | null
        styling: {
          headingColor: string | null
          descriptionColor: string | null
          backgroundColor: string | null
        } | null
      }
    | {
        _key: string
        _type: 'podcastSection'
        sectionTitle: string | null
        episodes: Array<{
          _id: string
          _type: 'podcast'
          title: string
          slug: string
          episodeNumber: string
          thumbnail: {
            asset: {
              _id: string
              url: string | null
              metadata: {
                lqip: string | null
                dimensions: {
                  width: number
                  height: number
                  aspectRatio: number
                } | null
              } | null
            } | null
            alt: string
            hotspot: SanityImageHotspot | null
            crop: SanityImageCrop | null
          }
          publishedAt: string
          duration: string
        }>
        showAllEpisodesLink: boolean | null
        allEpisodesLinkText: string | null
        allEpisodesLinkUrl: string | null
        podcastBranding: {
          name: string | null
          subtitle: string | null
        } | null
        animations: {
          enabled: boolean | null
        } | null
      }
  > | null
} | null
// Variable: magazineQuery
// Query: *[_type == 'magazine'] | order(publishedAt desc) {    _id,    _type,    title,    "slug": slug.current,    excerpt,    category,    thumbnail {      asset->{        _id,        url,        metadata {          lqip,          dimensions {            width,            height,            aspectRatio          }        }      },      alt,      hotspot,      crop    },    publishedAt,    "author": author->{      name    },    duration,    label,    featured  }
export type MagazineQueryResult = Array<{
  _id: string
  _type: 'magazine'
  title: string
  slug: string
  excerpt: string
  category: 'art' | 'sculptures' | 'street-art'
  thumbnail: {
    asset: {
      _id: string
      url: string | null
      metadata: {
        lqip: string | null
        dimensions: {
          width: number
          height: number
          aspectRatio: number
        } | null
      } | null
    } | null
    alt: string
    hotspot: SanityImageHotspot | null
    crop: SanityImageCrop | null
  }
  publishedAt: string
  author: {
    name: string
  }
  duration: number
  label: string | null
  featured: boolean | null
}>
// Variable: magazineDetailQuery
// Query: *[_type == 'magazine' && slug.current == $slug][0] {    _id,    _type,    title,    "slug": slug.current,    excerpt,    category,    thumbnail {      asset->{        _id,        url,        metadata {          lqip,          dimensions {            width,            height,            aspectRatio          }        }      },      alt,      hotspot,      crop    },    heroImage {      asset->{        _id,        url,        metadata {          lqip,          dimensions {            width,            height,            aspectRatio          }        }      },      alt,      hotspot,      crop    },    heroDescription,    publishedAt,    author-> {      name,      image {        asset->{          _id,          url,          metadata {            lqip,            dimensions {              width,              height,              aspectRatio            }          }        },        alt,        hotspot,        crop      },      bio    },    duration,    label,    content[] {      ...,      markDefs[]{      ...,        _type == "link" => {    "page": page->slug.current,    "post": post->slug.current  }     },    },    // quote {    //   text,    //   attribution    // },    socialShare {      instagram,      twitter,      youtube    },    featured,    seo {      metaTitle,      metaDescription,      ogImage {        asset->{          _id,          url        }      }    }  }
export type MagazineDetailQueryResult = {
  _id: string
  _type: 'magazine'
  title: string
  slug: string
  excerpt: string
  category: 'art' | 'sculptures' | 'street-art'
  thumbnail: {
    asset: {
      _id: string
      url: string | null
      metadata: {
        lqip: string | null
        dimensions: {
          width: number
          height: number
          aspectRatio: number
        } | null
      } | null
    } | null
    alt: string
    hotspot: SanityImageHotspot | null
    crop: SanityImageCrop | null
  }
  heroImage: {
    asset: {
      _id: string
      url: string | null
      metadata: {
        lqip: string | null
        dimensions: {
          width: number
          height: number
          aspectRatio: number
        } | null
      } | null
    } | null
    alt: string
    hotspot: SanityImageHotspot | null
    crop: SanityImageCrop | null
  }
  heroDescription: string
  publishedAt: string
  author: {
    name: string
    image: {
      asset: {
        _id: string
        url: string | null
        metadata: {
          lqip: string | null
          dimensions: {
            width: number
            height: number
            aspectRatio: number
          } | null
        } | null
      } | null
      alt: string
      hotspot: SanityImageHotspot | null
      crop: SanityImageCrop | null
    }
    bio: string
  }
  duration: number
  label: string | null
  content: Array<
    | {
        children?: Array<{
          marks?: Array<string>
          text?: string
          _type: 'span'
          _key: string
        }>
        style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal'
        listItem?: 'bullet' | 'number'
        markDefs: Array<{
          linkType?: 'href' | 'page' | 'post'
          href?: string
          page: string | null
          post: string | null
          openInNewTab?: boolean
          _type: 'link'
          _key: string
        }> | null
        level?: number
        _type: 'block'
        _key: string
      }
    | {
        asset?: {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        media?: unknown
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        alt: string
        caption?: string
        _type: 'contentImage'
        _key: string
        markDefs: null
      }
    | {
        text: string
        attribution?: string
        _type: 'quote'
        _key: string
        markDefs: null
      }
  >
  socialShare: {
    instagram: string | null
    twitter: string | null
    youtube: string | null
  } | null
  featured: boolean | null
  seo: {
    metaTitle: string | null
    metaDescription: string | null
    ogImage: {
      asset: {
        _id: string
        url: string | null
      } | null
    } | null
  } | null
} | null
// Variable: featuredMagazinesQuery
// Query: *[_type == 'magazine' && featured == true] | order(publishedAt desc) [0..5] {    _id,    _type,    title,    "slug": slug.current,    excerpt,    category,    thumbnail {      asset->{        _id,        url,        metadata {          lqip,          dimensions {            width,            height,            aspectRatio          }        }      },      alt,      hotspot,      crop    },    publishedAt,    "author": author.name,    duration,    label,    featured  }
export type FeaturedMagazinesQueryResult = Array<{
  _id: string
  _type: 'magazine'
  title: string
  slug: string
  excerpt: string
  category: 'art' | 'sculptures' | 'street-art'
  thumbnail: {
    asset: {
      _id: string
      url: string | null
      metadata: {
        lqip: string | null
        dimensions: {
          width: number
          height: number
          aspectRatio: number
        } | null
      } | null
    } | null
    alt: string
    hotspot: SanityImageHotspot | null
    crop: SanityImageCrop | null
  }
  publishedAt: string
  author: null
  duration: number
  label: string | null
  featured: boolean | null
}>
// Variable: latestMagazinesQuery
// Query: *[_type == 'magazine' && slug.current != $slug] | order(publishedAt desc) [0..2] {    _id,    _type,    title,    "slug": slug.current,    excerpt,    category,    thumbnail {      asset->{        _id,        url,        metadata {          lqip,          dimensions {            width,            height,            aspectRatio          }        }      },      alt,      hotspot,      crop    },    publishedAt,    "author": author->{      name    },    duration,    label  }
export type LatestMagazinesQueryResult = Array<{
  _id: string
  _type: 'magazine'
  title: string
  slug: string
  excerpt: string
  category: 'art' | 'sculptures' | 'street-art'
  thumbnail: {
    asset: {
      _id: string
      url: string | null
      metadata: {
        lqip: string | null
        dimensions: {
          width: number
          height: number
          aspectRatio: number
        } | null
      } | null
    } | null
    alt: string
    hotspot: SanityImageHotspot | null
    crop: SanityImageCrop | null
  }
  publishedAt: string
  author: {
    name: string
  }
  duration: number
  label: string | null
}>
// Variable: magazineSlugsQuery
// Query: *[_type == 'magazine'] {    "slug": slug.current  }
export type MagazineSlugsQueryResult = Array<{
  slug: string
}>
// Variable: sitemapData
// Query: *[_type == "page" || _type == "post" && defined(slug.current)] | order(_type asc) {    "slug": slug.current,    _type,    _updatedAt,  }
export type SitemapDataResult = Array<
  | {
      slug: string
      _type: 'page'
      _updatedAt: string
    }
  | {
      slug: string
      _type: 'post'
      _updatedAt: string
    }
>
// Variable: allPostsQuery
// Query: *[_type == "post" && defined(slug.current)] | order(date desc, _updatedAt desc) {      _id,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _updatedAt),  "author": author->{firstName, lastName, picture},  }
export type AllPostsQueryResult = Array<{
  _id: string
  status: 'draft' | 'published'
  title: string
  slug: string
  excerpt: string | null
  coverImage: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    _type: 'image'
  }
  date: string
  author: {
    firstName: string
    lastName: string
    picture: {
      asset?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
      }
      media?: unknown
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      alt?: string
      _type: 'image'
    }
  } | null
}>
// Variable: morePostsQuery
// Query: *[_type == "post" && _id != $skip && defined(slug.current)] | order(date desc, _updatedAt desc) [0...$limit] {      _id,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _updatedAt),  "author": author->{firstName, lastName, picture},  }
export type MorePostsQueryResult = Array<{
  _id: string
  status: 'draft' | 'published'
  title: string
  slug: string
  excerpt: string | null
  coverImage: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    _type: 'image'
  }
  date: string
  author: {
    firstName: string
    lastName: string
    picture: {
      asset?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
      }
      media?: unknown
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      alt?: string
      _type: 'image'
    }
  } | null
}>
// Variable: postQuery
// Query: *[_type == "post" && slug.current == $slug] [0] {    content[]{    ...,    markDefs[]{      ...,        _type == "link" => {    "page": page->slug.current,    "post": post->slug.current  }    }  },      _id,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _updatedAt),  "author": author->{firstName, lastName, picture},  }
export type PostQueryResult = {
  content: Array<
    | {
        children?: Array<{
          marks?: Array<string>
          text?: string
          _type: 'span'
          _key: string
        }>
        style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal'
        listItem?: 'bullet' | 'number'
        markDefs: Array<{
          linkType?: 'href' | 'page' | 'post'
          href?: string
          page: string | null
          post: string | null
          openInNewTab?: boolean
          _type: 'link'
          _key: string
        }> | null
        level?: number
        _type: 'block'
        _key: string
      }
    | {
        asset?: {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        media?: unknown
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        alt: string
        caption?: string
        _type: 'contentImage'
        _key: string
        markDefs: null
      }
    | {
        text: string
        attribution?: string
        _type: 'quote'
        _key: string
        markDefs: null
      }
  > | null
  _id: string
  status: 'draft' | 'published'
  title: string
  slug: string
  excerpt: string | null
  coverImage: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    _type: 'image'
  }
  date: string
  author: {
    firstName: string
    lastName: string
    picture: {
      asset?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
      }
      media?: unknown
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      alt?: string
      _type: 'image'
    }
  } | null
} | null
// Variable: postPagesSlugs
// Query: *[_type == "post" && defined(slug.current)]  {"slug": slug.current}
export type PostPagesSlugsResult = Array<{
  slug: string
}>
// Variable: pagesSlugs
// Query: *[_type == "page" && defined(slug.current)]  {"slug": slug.current}
export type PagesSlugsResult = Array<{
  slug: string
}>
// Variable: podcastsQuery
// Query: *[_type == 'podcast'] | order(episodeNumber desc) {    _id,    _type,    title,    "slug": slug.current,    episodeNumber,    thumbnail {      asset->{        _id,        url,        metadata {          lqip,          dimensions {            width,            height,            aspectRatio          }        }      },      alt,      hotspot,      crop    },    podcastBranding {      name,      subtitle    },    publishedAt,    duration,    featured  }
export type PodcastsQueryResult = Array<{
  _id: string
  _type: 'podcast'
  title: string
  slug: string
  episodeNumber: string
  thumbnail: {
    asset: {
      _id: string
      url: string | null
      metadata: {
        lqip: string | null
        dimensions: {
          width: number
          height: number
          aspectRatio: number
        } | null
      } | null
    } | null
    alt: string
    hotspot: SanityImageHotspot | null
    crop: SanityImageCrop | null
  }
  podcastBranding: {
    name: string | null
    subtitle: string | null
  } | null
  publishedAt: string
  duration: string
  featured: boolean | null
}>
// Variable: podcastDetailQuery
// Query: *[_type == 'podcast' && slug.current == $slug][0] {    _id,    _type,    title,    "slug": slug.current,    episodeNumber,    thumbnail {      asset->{        _id,        url,        metadata {          lqip,          dimensions {            width,            height,            aspectRatio          }        }      },      alt,      hotspot,      crop    },    publishedAt,    duration,    excerpt,    content,    podcastLinks {      spotify,      apple,      soundcloud    },    podcastBranding {      name,      subtitle    },    socialShare {      instagram,      twitter,      youtube    },    featured,    seo {      metaTitle,      metaDescription,      ogImage {        asset->{          _id,          url        }      }    }  }
export type PodcastDetailQueryResult = {
  _id: string
  _type: 'podcast'
  title: string
  slug: string
  episodeNumber: string
  thumbnail: {
    asset: {
      _id: string
      url: string | null
      metadata: {
        lqip: string | null
        dimensions: {
          width: number
          height: number
          aspectRatio: number
        } | null
      } | null
    } | null
    alt: string
    hotspot: SanityImageHotspot | null
    crop: SanityImageCrop | null
  }
  publishedAt: string
  duration: string
  excerpt: string
  content: BlockContent
  podcastLinks: {
    spotify: string | null
    apple: string | null
    soundcloud: string | null
  } | null
  podcastBranding: {
    name: string | null
    subtitle: string | null
  } | null
  socialShare: {
    instagram: string | null
    twitter: string | null
    youtube: string | null
  } | null
  featured: boolean | null
  seo: {
    metaTitle: string | null
    metaDescription: string | null
    ogImage: {
      asset: {
        _id: string
        url: string | null
      } | null
    } | null
  } | null
} | null
// Variable: latestPodcastsQuery
// Query: *[_type == 'podcast' && slug.current != $slug] | order(episodeNumber desc) [0..2] {    _id,    _type,    title,    "slug": slug.current,    episodeNumber,    thumbnail {      asset->{        _id,        url,        metadata {          lqip,          dimensions {            width,            height,            aspectRatio          }        }      },      alt,      hotspot,      crop    },    podcastBranding {      name,      subtitle    },    publishedAt,    duration  }
export type LatestPodcastsQueryResult = Array<{
  _id: string
  _type: 'podcast'
  title: string
  slug: string
  episodeNumber: string
  thumbnail: {
    asset: {
      _id: string
      url: string | null
      metadata: {
        lqip: string | null
        dimensions: {
          width: number
          height: number
          aspectRatio: number
        } | null
      } | null
    } | null
    alt: string
    hotspot: SanityImageHotspot | null
    crop: SanityImageCrop | null
  }
  podcastBranding: {
    name: string | null
    subtitle: string | null
  } | null
  publishedAt: string
  duration: string
}>
// Variable: featuredPodcastsQuery
// Query: *[_type == 'podcast' && featured == true] | order(episodeNumber desc) [0..5] {    _id,    _type,    title,    "slug": slug.current,    episodeNumber,    thumbnail {      asset->{        _id,        url,        metadata {          lqip,          dimensions {            width,            height,            aspectRatio          }        }      },      alt,      hotspot,      crop    },    publishedAt,    duration,    featured  }
export type FeaturedPodcastsQueryResult = Array<{
  _id: string
  _type: 'podcast'
  title: string
  slug: string
  episodeNumber: string
  thumbnail: {
    asset: {
      _id: string
      url: string | null
      metadata: {
        lqip: string | null
        dimensions: {
          width: number
          height: number
          aspectRatio: number
        } | null
      } | null
    } | null
    alt: string
    hotspot: SanityImageHotspot | null
    crop: SanityImageCrop | null
  }
  publishedAt: string
  duration: string
  featured: boolean | null
}>
// Variable: podcastSlugsQuery
// Query: *[_type == 'podcast'] {    "slug": slug.current  }
export type PodcastSlugsQueryResult = Array<{
  slug: string
}>

// Query TypeMap
import '@sanity/client'
declare module '@sanity/client' {
  interface SanityQueries {
    '\n  *[_type == \'author\'] {\n    "slug": slug.current\n  }\n': AuthorSlugsQueryResult
    '\n  *[_type == \'author\'] | order(name asc) {\n    _id,\n    _type,\n    name,\n    "slug": slug.current,\n    image {\n      asset->{\n        _id,\n        url,\n        metadata {\n          lqip,\n          dimensions {\n            width,\n            height,\n            aspectRatio\n          }\n        }\n      },\n      alt,\n      hotspot,\n      crop\n    },\n    job,\n    city,\n    bio,\n    featured\n  }\n': AuthorsQueryResult
    '\n  *[_type == \'author\' && slug.current == $slug][0] {\n    _id,\n    _type,\n    name,\n    "slug": slug.current,\n    image {\n      asset->{\n        _id,\n        url,\n        metadata {\n          lqip,\n          dimensions {\n            width,\n            height,\n            aspectRatio\n          }\n        }\n      },\n      alt,\n      hotspot,\n      crop\n    },\n    job,\n    city,\n    bio,\n    fullBio,\n    intro,\n    socialLinks {\n      instagram,\n      twitter,\n      youtube\n    },\n    featured,\n    "articles": *[_type == \'magazine\' && author._ref == ^._id] | order(publishedAt desc) {\n      _id,\n      _type,\n      title,\n      "slug": slug.current,\n      thumbnail {\n        asset->{\n          _id,\n          url,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height,\n              aspectRatio\n            }\n          }\n        },\n        alt,\n        hotspot,\n        crop\n      },\n      publishedAt,\n      duration\n    },\n    "articleCount": count(*[_type == \'magazine\' && author._ref == ^._id]),\n    seo {\n      metaTitle,\n      metaDescription\n    }\n  }\n': AuthorWithArticlesQueryResult
    '\n  *[_type == \'author\' && slug.current == $slug][0] {\n    _id,\n    _type,\n    name,\n    "slug": slug.current,\n    image {\n      asset->{\n        _id,\n        url,\n        metadata {\n          lqip,\n          dimensions {\n            width,\n            height,\n            aspectRatio\n          }\n        }\n      },\n      alt,\n      hotspot,\n      crop\n    },\n    job,\n    city,\n    bio,\n    fullBio,\n    intro,\n    socialLinks {\n      instagram,\n      twitter,\n      youtube\n    },\n    featured,\n    seo {\n      metaTitle,\n      metaDescription\n    }\n  }\n': AuthorDetailQueryResult
    '*[_type == "settings"][0]{\n  _id,\n  title,\n  description,\n  ogImage,\n  footer {\n    newsletter {\n      active,\n      title,\n      description,\n      inputPlaceholder,\n      buttonText,\n    },\n    marquee,\n    logo {\n      asset->{\n        url\n      },\n      alt\n    },\n    tagline,\n    description,\n    navLinks[] {\n      text,\n      url\n    },\n    copyright,\n    socialLinks[] {\n      platform,\n      url,\n      icon {\n        asset->{\n          url\n        },\n        alt\n      }\n    },\n  },\n  navbar {\n    logo {\n      asset->{\n        url\n      },\n      alt\n    },\n    navLinks[] {\n      text,\n      url\n    },\n    socialLinks[] {\n      platform,\n      url,\n      icon {\n        asset->{\n          url\n        },\n        alt\n      }\n    },\n    button {\n      text,\n      link {\n        _type,\n        _key,\n        linkType,\n        page,\n        url,\n        href,\n        openInNewTab\n      },\n      type\n    }\n  }\n}': SettingsQueryResult
    '\n  *[_type == \'page\' && slug.current == $slug][0]{\n    _id,\n    _type,\n    name,\n    slug,\n    heading,\n    subheading,\n    "pageBuilder": pageBuilder[]{\n      ...,\n        _type == "heroSection" => {\n        _key,\n        _type,\n        heroText {\n          enabled,\n          strokeColor {\n            hex\n          },\n          fillColor {\n            hex\n          }\n        },\n        newsTicker {\n          enabled,\n          label,\n          backgroundColor,\n          textColor,\n          items[] {\n            text\n          },\n          speed\n        },\n        heroHeading,\n        description,\n        metadata {\n          author {\n            label,\n            name\n          },\n          date {\n            label,\n            value\n          },\n          duration {\n            label,\n            value\n          }\n        },\n        label {\n          text,\n          borderColor,\n          textColor\n        },\n        heroImage {\n          asset->{\n            _id,\n            url,\n            metadata {\n              lqip,\n              dimensions {\n                width,\n                height,\n                aspectRatio\n              }\n            }\n          },\n          alt,\n          hotspot,\n          crop\n        },\n        animations {\n          enabled,\n          parallaxStrength\n        },\n        styling {\n          headingColor,\n          descriptionColor,\n          backgroundColor\n        }\n      },\n      _type == "articlesSection" => {\n        _key,\n        _type,\n        sectionTitle,\n        articles[]->{\n          ...,\n          _id,\n          _type,\n          title,\n          "slug": slug.current,\n          excerpt,\n          category,\n          thumbnail {\n            asset->{\n              _id,\n              url,\n              metadata {\n                lqip,\n                dimensions {\n                  width,\n                  height,\n                  aspectRatio\n                }\n              }\n            },\n            alt,\n            hotspot,\n            crop\n          },\n          publishedAt,\n          "author": author->{\n            name\n          },\n          duration\n        },\n        showAllArticlesLink,\n        allArticlesLinkText,\n        allArticlesLinkUrl,\n        sidebar {\n          printMagazine {\n            enabled,\n            label,\n            issue,\n            coverImage {\n              asset->{\n                _id,\n                url,\n                metadata {\n                  lqip,\n                  dimensions {\n                    width,\n                    height,\n                    aspectRatio\n                  }\n                }\n              },\n              alt,\n              hotspot,\n              crop\n            },\n            buttonText,\n            buttonLink\n          },\n          mostPopular {\n            enabled,\n            title,\n            articles[]->{\n              _id,\n              _type,\n              title,\n              "slug": slug.current,\n              "author": author->{\n                name\n              }\n            }\n          },\n          newsletter {\n            enabled,\n            label,\n            heading,\n            placeholder,\n            buttonText,\n            backgroundColor\n          }\n        },\n        animations {\n          enabled,\n          animationDuration\n        },\n        layout {\n          mainColumnWidth,\n          showSidebar\n        }\n      },\n      \n  _type == "podcastSection" => {\n    _key,\n    _type,\n    sectionTitle,\n    episodes[]->{\n      _id,\n      _type,\n      title,\n      "slug": slug.current,\n      episodeNumber,\n      thumbnail {\n        asset->{\n          _id,\n          url,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height,\n              aspectRatio\n            }\n          }\n        },\n        alt,\n        hotspot,\n        crop\n      },\n      publishedAt,\n      duration\n    },\n    showAllEpisodesLink,\n    allEpisodesLinkText,\n    allEpisodesLinkUrl,\n    podcastBranding {\n      name,\n      subtitle\n    },\n    animations {\n      enabled\n    }\n  }\n,\n      \n  _type == "authorsSection" => {\n    _key,\n    _type,\n    sectionTitle,\n    authors[]->{\n      _id,\n      _type,\n      name,\n      "slug": slug.current,\n      image {\n        asset->{\n          _id,\n          url,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height,\n              aspectRatio\n            }\n          }\n        },\n        alt,\n        hotspot,\n        crop\n      },\n      job,\n      city,\n      bio,\n      socialLinks {\n        instagram,\n        twitter,\n        youtube\n      },\n      featured,\n      "articleCount": count(*[_type == \'magazine\' && author._ref == ^._id])\n    },\n    limit,\n    showAllAuthorsLink,\n    allAuthorsLinkText,\n    allAuthorsLinkUrl\n  }\n,\n    },\n  }\n': GetPageQueryResult
    '\n  *[_type == \'magazine\'] | order(publishedAt desc) {\n    _id,\n    _type,\n    title,\n    "slug": slug.current,\n    excerpt,\n    category,\n    thumbnail {\n      asset->{\n        _id,\n        url,\n        metadata {\n          lqip,\n          dimensions {\n            width,\n            height,\n            aspectRatio\n          }\n        }\n      },\n      alt,\n      hotspot,\n      crop\n    },\n    publishedAt,\n    "author": author->{\n      name\n    },\n    duration,\n    label,\n    featured\n  }\n': MagazineQueryResult
    '\n  *[_type == \'magazine\' && slug.current == $slug][0] {\n    _id,\n    _type,\n    title,\n    "slug": slug.current,\n    excerpt,\n    category,\n    thumbnail {\n      asset->{\n        _id,\n        url,\n        metadata {\n          lqip,\n          dimensions {\n            width,\n            height,\n            aspectRatio\n          }\n        }\n      },\n      alt,\n      hotspot,\n      crop\n    },\n    heroImage {\n      asset->{\n        _id,\n        url,\n        metadata {\n          lqip,\n          dimensions {\n            width,\n            height,\n            aspectRatio\n          }\n        }\n      },\n      alt,\n      hotspot,\n      crop\n    },\n    heroDescription,\n    publishedAt,\n    author-> {\n      name,\n      image {\n        asset->{\n          _id,\n          url,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height,\n              aspectRatio\n            }\n          }\n        },\n        alt,\n        hotspot,\n        crop\n      },\n      bio\n    },\n    duration,\n    label,\n    content[] {\n      ...,\n      markDefs[]{\n      ...,\n      \n  _type == "link" => {\n    "page": page->slug.current,\n    "post": post->slug.current\n  }\n\n     },\n    },\n    // quote {\n    //   text,\n    //   attribution\n    // },\n    socialShare {\n      instagram,\n      twitter,\n      youtube\n    },\n    featured,\n    seo {\n      metaTitle,\n      metaDescription,\n      ogImage {\n        asset->{\n          _id,\n          url\n        }\n      }\n    }\n  }\n': MagazineDetailQueryResult
    '\n  *[_type == \'magazine\' && featured == true] | order(publishedAt desc) [0..5] {\n    _id,\n    _type,\n    title,\n    "slug": slug.current,\n    excerpt,\n    category,\n    thumbnail {\n      asset->{\n        _id,\n        url,\n        metadata {\n          lqip,\n          dimensions {\n            width,\n            height,\n            aspectRatio\n          }\n        }\n      },\n      alt,\n      hotspot,\n      crop\n    },\n    publishedAt,\n    "author": author.name,\n    duration,\n    label,\n    featured\n  }\n': FeaturedMagazinesQueryResult
    '\n  *[_type == \'magazine\' && slug.current != $slug] | order(publishedAt desc) [0..2] {\n    _id,\n    _type,\n    title,\n    "slug": slug.current,\n    excerpt,\n    category,\n    thumbnail {\n      asset->{\n        _id,\n        url,\n        metadata {\n          lqip,\n          dimensions {\n            width,\n            height,\n            aspectRatio\n          }\n        }\n      },\n      alt,\n      hotspot,\n      crop\n    },\n    publishedAt,\n    "author": author->{\n      name\n    },\n    duration,\n    label\n  }\n': LatestMagazinesQueryResult
    '\n  *[_type == \'magazine\'] {\n    "slug": slug.current\n  }\n': MagazineSlugsQueryResult
    '\n  *[_type == "page" || _type == "post" && defined(slug.current)] | order(_type asc) {\n    "slug": slug.current,\n    _type,\n    _updatedAt,\n  }\n': SitemapDataResult
    '\n  *[_type == "post" && defined(slug.current)] | order(date desc, _updatedAt desc) {\n    \n  _id,\n  "status": select(_originalId in path("drafts.**") => "draft", "published"),\n  "title": coalesce(title, "Untitled"),\n  "slug": slug.current,\n  excerpt,\n  coverImage,\n  "date": coalesce(date, _updatedAt),\n  "author": author->{firstName, lastName, picture},\n\n  }\n': AllPostsQueryResult
    '\n  *[_type == "post" && _id != $skip && defined(slug.current)] | order(date desc, _updatedAt desc) [0...$limit] {\n    \n  _id,\n  "status": select(_originalId in path("drafts.**") => "draft", "published"),\n  "title": coalesce(title, "Untitled"),\n  "slug": slug.current,\n  excerpt,\n  coverImage,\n  "date": coalesce(date, _updatedAt),\n  "author": author->{firstName, lastName, picture},\n\n  }\n': MorePostsQueryResult
    '\n  *[_type == "post" && slug.current == $slug] [0] {\n    content[]{\n    ...,\n    markDefs[]{\n      ...,\n      \n  _type == "link" => {\n    "page": page->slug.current,\n    "post": post->slug.current\n  }\n\n    }\n  },\n    \n  _id,\n  "status": select(_originalId in path("drafts.**") => "draft", "published"),\n  "title": coalesce(title, "Untitled"),\n  "slug": slug.current,\n  excerpt,\n  coverImage,\n  "date": coalesce(date, _updatedAt),\n  "author": author->{firstName, lastName, picture},\n\n  }\n': PostQueryResult
    '\n  *[_type == "post" && defined(slug.current)]\n  {"slug": slug.current}\n': PostPagesSlugsResult
    '\n  *[_type == "page" && defined(slug.current)]\n  {"slug": slug.current}\n': PagesSlugsResult
    '\n  *[_type == \'podcast\'] | order(episodeNumber desc) {\n    _id,\n    _type,\n    title,\n    "slug": slug.current,\n    episodeNumber,\n    thumbnail {\n      asset->{\n        _id,\n        url,\n        metadata {\n          lqip,\n          dimensions {\n            width,\n            height,\n            aspectRatio\n          }\n        }\n      },\n      alt,\n      hotspot,\n      crop\n    },\n    podcastBranding {\n      name,\n      subtitle\n    },\n    publishedAt,\n    duration,\n    featured\n  }\n': PodcastsQueryResult
    '\n  *[_type == \'podcast\' && slug.current == $slug][0] {\n    _id,\n    _type,\n    title,\n    "slug": slug.current,\n    episodeNumber,\n    thumbnail {\n      asset->{\n        _id,\n        url,\n        metadata {\n          lqip,\n          dimensions {\n            width,\n            height,\n            aspectRatio\n          }\n        }\n      },\n      alt,\n      hotspot,\n      crop\n    },\n    publishedAt,\n    duration,\n    excerpt,\n    content,\n    podcastLinks {\n      spotify,\n      apple,\n      soundcloud\n    },\n    podcastBranding {\n      name,\n      subtitle\n    },\n    socialShare {\n      instagram,\n      twitter,\n      youtube\n    },\n    featured,\n    seo {\n      metaTitle,\n      metaDescription,\n      ogImage {\n        asset->{\n          _id,\n          url\n        }\n      }\n    }\n  }\n': PodcastDetailQueryResult
    '\n  *[_type == \'podcast\' && slug.current != $slug] | order(episodeNumber desc) [0..2] {\n    _id,\n    _type,\n    title,\n    "slug": slug.current,\n    episodeNumber,\n    thumbnail {\n      asset->{\n        _id,\n        url,\n        metadata {\n          lqip,\n          dimensions {\n            width,\n            height,\n            aspectRatio\n          }\n        }\n      },\n      alt,\n      hotspot,\n      crop\n    },\n    podcastBranding {\n      name,\n      subtitle\n    },\n    publishedAt,\n    duration\n  }\n': LatestPodcastsQueryResult
    '\n  *[_type == \'podcast\' && featured == true] | order(episodeNumber desc) [0..5] {\n    _id,\n    _type,\n    title,\n    "slug": slug.current,\n    episodeNumber,\n    thumbnail {\n      asset->{\n        _id,\n        url,\n        metadata {\n          lqip,\n          dimensions {\n            width,\n            height,\n            aspectRatio\n          }\n        }\n      },\n      alt,\n      hotspot,\n      crop\n    },\n    publishedAt,\n    duration,\n    featured\n  }\n': FeaturedPodcastsQueryResult
    '\n  *[_type == \'podcast\'] {\n    "slug": slug.current\n  }\n': PodcastSlugsQueryResult
  }
}
